{
  "version": 3,
  "sources": ["src/app/services/product-cart.service.ts", "src/app/services/quantity-cart.service.ts", "src/app/components/product-quantity/product-quantity.component.ts", "src/app/components/product-quantity/product-quantity.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { IProductCart } from '../models/IProductCart.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductCartService {\r\n  private itens: IProductCart[] = [];\r\n  private priceTotal: number = 0;\r\n\r\n  constructor() {\r\n    this.getCart();\r\n  }\r\n\r\n  getCart(): IProductCart[] {\r\n    //armazenar na local store\r\n    const cartItems = localStorage.getItem('cart');\r\n    if(!cartItems){\r\n      return [];\r\n    }\r\n    this.itens = JSON.parse(cartItems);\r\n    this.updatedPriceTotal();\r\n    return this.itens;\r\n  }\r\n\r\n  setProductCart(product: IProductCart): void {\r\n    \r\n    let index = -1;\r\n    for(let i in this.itens){\r\n      if(this.itens[i].id === product.id) index = parseInt(i);\r\n    }\r\n    if(index > -1) this.itens[index].quantityProducts += 1\r\n    else this.itens.push(product);\r\n    \r\n    //adicionar ao cart do local store como string\r\n    localStorage.setItem('cart', JSON.stringify(this.itens));    \r\n  }\r\n\r\n  getQuantityProducts(id: number): number{\r\n    // this.updatedPriceTotal();\r\n    \r\n    const product = this.itens.find(item => item.id === id);   \r\n    return product?.quantityProducts || 1;\r\n  }\r\n  \r\n  setQuantityProductsById(id: number, quantity: number){\r\n    for (let i in this.itens) {\r\n      if (this.itens[i].id === id) {\r\n        this.itens[i].quantityProducts = quantity;                \r\n      }\r\n    }\r\n    this.updatedPriceTotal();\r\n    localStorage.setItem('cart', JSON.stringify(this.itens));\r\n  }\r\n\r\n  updatedPriceTotal(){\r\n    let priceTotal = 0;\r\n    for(let i of this.itens){\r\n      priceTotal += (i.price * i.quantityProducts);      \r\n    } \r\n    this.setPriceTotal(priceTotal) \r\n    document.getElementById('bagPriceTotal')!.innerHTML = \"R$\"+this.priceTotal.toFixed(2);     \r\n  }\r\n  \r\n  setPriceTotal(newPrice:number):void{\r\n    this.priceTotal = newPrice;\r\n  }\r\n\r\n  getPriceTotal():number{ \r\n    return Number(this.priceTotal.toFixed(2));\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { IProductCart } from '../models/IProductCart.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuantityCartService {\r\n  itens: IProductCart[] = [];\r\n  quantityInCart: number = 1;\r\n  constructor() {\r\n    this.updatedQuantityInCart();\r\n  }\r\n\r\n  updatedQuantityInCart(): void {\r\n    const cartItems = localStorage.getItem('cart');\r\n    if(!cartItems){\r\n      console.log(\"não há itens no carrinho\");\r\n      return;\r\n    }\r\n\r\n    this.itens = JSON.parse(cartItems);\r\n    let quantityInCart = 0;\r\n    this.itens.map((item) => {\r\n      quantityInCart += item.quantityProducts;      \r\n    });\r\n    this.setTotalInCart(quantityInCart);\r\n    document.getElementById('quantityInBag')!.innerHTML = `${this.quantityInCart}`;           \r\n  }\r\n  \r\n  setTotalInCart(value: number): void {\r\n    this.quantityInCart = value;\r\n  }\r\n  getTotalInCart(): number {\r\n    return this.quantityInCart;\r\n  }\r\n\r\n  clearCart(): void {\r\n    this.itens = [];\r\n    localStorage.clear();\r\n  }\r\n\r\n  deleteProductInCart(id: number){\r\n    this.itens = JSON.parse(localStorage.getItem('cart') || '');  \r\n    this.itens = this.itens.filter(item => item.id !== id)  \r\n    localStorage.setItem('cart', JSON.stringify(this.itens));\r\n    this.updatedQuantityInCart();\r\n  }\r\n}\r\n", "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, signal, SimpleChanges, WritableSignal } from '@angular/core';\r\nimport { ProductCartService } from '../../services/product-cart.service';\r\nimport { QuantityCartService } from '../../services/quantity-cart.service';\r\n\r\n@Component({\r\n  selector: 'app-product-quantity',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './product-quantity.component.html',\r\n  styleUrl: './product-quantity.component.css'\r\n})\r\nexport class ProductQuantityComponent implements OnInit{\r\n\r\n  constructor(private productCartService : ProductCartService,\r\n    private quantityCartService: QuantityCartService){}\r\n\r\n  ngOnInit(): void {\r\n    this.quantity.set(this.getQuantity(this.id()));          \r\n  }\r\n\r\n  public id: WritableSignal<number> = signal(0);\r\n  @Input() set inputId(id: number){\r\n    this.id.set(id);\r\n  }\r\n  \r\n  public isShowText = signal(false);\r\n  @Input() set inputShowText(ishowText: boolean){\r\n    this.isShowText.set(ishowText);\r\n  }\r\n  \r\n  public quantity:WritableSignal<number> = signal(1);\r\n  @Output() quantityOuput: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  onHandleIncrease(): void {\r\n    this.quantity.update((oldValue:number) => ++oldValue);\r\n    this.quantityOuput.emit(this.quantity());\r\n  }\r\n  onHandleDecrease(): void {\r\n    if(this.quantity() > 1){\r\n      this.quantity.update((oldValue:number) => --oldValue);\r\n      this.quantityOuput.emit(this.quantity())\r\n    }\r\n  }\r\n  \r\n  getQuantity(id: number):number{\r\n    return this.productCartService.getQuantityProducts(id);\r\n    \r\n  }\r\n}\r\n", "<div class=\"quantity__container\">\r\n    @if (isShowText()) {\r\n        <span class=\"quantity-text\">Quantidade</span>\r\n    }\r\n    <div class=\"quantity__content\">\r\n        <button type=\"button\" class=\"btn-quantity\" (click)=\"onHandleDecrease()\">-</button>\r\n        <span class=\"current-quantity\">{{quantity()}}</span>\r\n        <button type=\"button\" class=\"btn-quantity\" (click)=\"onHandleIncrease()\">+</button>\r\n    </div>\r\n</div>"],
  "mappings": "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",
  "names": ["ProductCartService", "constructor", "itens", "priceTotal", "getCart", "cartItems", "localStorage", "getItem", "JSON", "parse", "updatedPriceTotal", "setProductCart", "product", "index", "i", "id", "parseInt", "quantityProducts", "push", "setItem", "stringify", "getQuantityProducts", "find", "item", "setQuantityProductsById", "quantity", "price", "setPriceTotal", "document", "getElementById", "innerHTML", "toFixed", "newPrice", "getPriceTotal", "Number", "factory", "\u0275fac", "providedIn", "_ProductCartService", "QuantityCartService", "constructor", "itens", "quantityInCart", "updatedQuantityInCart", "cartItems", "localStorage", "getItem", "console", "log", "JSON", "parse", "map", "item", "quantityProducts", "setTotalInCart", "document", "getElementById", "innerHTML", "value", "getTotalInCart", "clearCart", "clear", "deleteProductInCart", "id", "filter", "setItem", "stringify", "factory", "\u0275fac", "providedIn", "_QuantityCartService", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "ProductQuantityComponent", "constructor", "productCartService", "quantityCartService", "id", "signal", "isShowText", "quantity", "quantityOuput", "EventEmitter", "ngOnInit", "set", "getQuantity", "inputId", "inputShowText", "ishowText", "onHandleIncrease", "update", "oldValue", "emit", "onHandleDecrease", "getQuantityProducts", "\u0275\u0275directiveInject", "ProductCartService", "QuantityCartService", "selectors", "inputs", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "ProductQuantityComponent_Conditional_1_Template", "\u0275\u0275listener", "\u0275\u0275advance", "\u0275\u0275conditional", "\u0275\u0275textInterpolate", "_ProductQuantityComponent"]
}
